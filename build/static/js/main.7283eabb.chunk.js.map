{"version":3,"sources":["components/App.js","index.js"],"names":["stripePromise","loadStripe","PredictionForm","email","setEmail","useState","homeTeam","setHomeTeam","awayTeam","setAwayTeam","prediction","setPrediction","error","setError","loading","setLoading","stripe","useStripe","elements","useElements","handlePrediction","async","response","axios","post","home_team","away_team","data","err","React","createElement","className","type","placeholder","value","onChange","e","target","Elements","CardElement","onClick","cardElement","getElement","paymentMethod","createPaymentMethod","card","message","payment_method_id","id","success","disabled","predicted_score","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"gOAMA,MAAMA,EAAgBC,YAAW,2BAiHlBC,MA/GQA,KACrB,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAUC,GAAeJ,mBAAS,KAClCK,EAAYC,GAAiBN,mBAAS,OACtCO,EAAOC,GAAYR,mBAAS,KAC5BS,EAASC,GAAcV,oBAAS,GACjCW,EAASC,sBACTC,EAAWC,wBA4CXC,EAAmBC,UACvB,IACE,MAAMC,QAAiBC,IAAMC,KAAK,gCAAiC,CACjErB,QACAsB,UAAWnB,EACXoB,UAAWlB,IAGbG,EAAcW,EAASK,MACvBZ,GAAW,GACX,MAAOa,GACPf,EAAS,iCACTE,GAAW,KAIf,OACEc,IAAAC,cAAA,OAAKC,UAAU,mDACbF,IAAAC,cAAA,MAAIC,UAAU,uCAAsC,0BAEpDF,IAAAC,cAAA,SACEE,KAAK,QAAQC,YAAY,aAAaF,UAAU,yBAChDG,MAAO/B,EAAOgC,SAAWC,GAAMhC,EAASgC,EAAEC,OAAOH,SAGnDL,IAAAC,cAAA,SACEE,KAAK,OAAOC,YAAY,YAAYF,UAAU,yBAC9CG,MAAO5B,EAAU6B,SAAWC,GAAM7B,EAAY6B,EAAEC,OAAOH,SAGzDL,IAAAC,cAAA,SACEE,KAAK,OAAOC,YAAY,YAAYF,UAAU,yBAC9CG,MAAO1B,EAAU2B,SAAWC,GAAM3B,EAAY2B,EAAEC,OAAOH,SAGzDL,IAAAC,cAACQ,WAAQ,CAACtB,OAAQhB,GAChB6B,IAAAC,cAACS,cAAW,CAACR,UAAU,oBACvBF,IAAAC,cAAA,UACEU,QA/EcnB,UACpB,GAAKL,GAAWE,EAAhB,CAEAL,EAAS,IACTE,GAAW,GAEX,IAEE,MAAM0B,EAAcvB,EAASwB,WAAWH,gBAClC,cAAEI,EAAa,MAAE/B,SAAgBI,EAAO4B,oBAAoB,CAChEZ,KAAM,OACNa,KAAMJ,IAGR,GAAI7B,EAGF,OAFAC,EAASD,EAAMkC,cACf/B,GAAW,GAUb,WAL8BQ,IAAMC,KAAK,gCAAiC,CACxErB,QACA4C,kBAAmBJ,EAAcK,MAGdrB,KAAKsB,QAGxB,OAFApC,EAAS,mCACTE,GAAW,GAKbK,IACA,MAAOQ,GACPf,EAAS,8BACTE,GAAW,MA4CPgB,UAAU,4CACVmB,SAAUpC,GAETA,EAAU,gBAAkB,4BAIhCF,GAASiB,IAAAC,cAAA,KAAGC,UAAU,qBAAqBnB,GAE3CF,GACCmB,IAAAC,cAAA,OAAKC,UAAU,gCACbF,IAAAC,cAAA,MAAIC,UAAU,yBAAwB,sBACtCF,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAASpB,EAAWe,WAAmB,OAAII,IAAAC,cAAA,cAASpB,EAAWgB,YAClEG,IAAAC,cAAA,SAAG,oBAAiBD,IAAAC,cAAA,cAASpB,EAAWyC,qB,MCxGlD,MAAMnD,EAAgBC,YAAW,2BAEpBmD,IAASC,WAAWC,SAASC,eAAe,SAEpDC,OACH3B,IAAAC,cAACD,IAAM4B,WAAU,KACf5B,IAAAC,cAACQ,WAAQ,CAACtB,OAAQhB,GAChB6B,IAAAC,cAAC5B,EAAc,W","file":"static/js/main.7283eabb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements, useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\n\r\n// ✅ Replace with your actual Stripe public key\r\nconst stripePromise = loadStripe(\"pk_test_your_public_key\");\r\n\r\nconst PredictionForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [homeTeam, setHomeTeam] = useState(\"\");\r\n  const [awayTeam, setAwayTeam] = useState(\"\");\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  // ✅ Handle Payment & Prediction Flow\r\n  const handlePayment = async () => {\r\n    if (!stripe || !elements) return;\r\n\r\n    setError(\"\");\r\n    setLoading(true);\r\n\r\n    try {\r\n      // ✅ Step 1: Get Stripe Payment Method\r\n      const cardElement = elements.getElement(CardElement);\r\n      const { paymentMethod, error } = await stripe.createPaymentMethod({\r\n        type: \"card\",\r\n        card: cardElement\r\n      });\r\n\r\n      if (error) {\r\n        setError(error.message);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // ✅ Step 2: Process Payment\r\n      const paymentResponse = await axios.post(\"http://localhost:5000/payment\", {\r\n        email,\r\n        payment_method_id: paymentMethod.id\r\n      });\r\n\r\n      if (!paymentResponse.data.success) {\r\n        setError(\"Payment failed. Try again.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // ✅ Step 3: Get AI Prediction After Payment Success\r\n      handlePrediction();\r\n    } catch (err) {\r\n      setError(\"Payment failed. Try again.\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // ✅ Fetch AI Prediction\r\n  const handlePrediction = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/predict\", {\r\n        email,\r\n        home_team: homeTeam,\r\n        away_team: awayTeam\r\n      });\r\n\r\n      setPrediction(response.data);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError(\"Prediction failed. Try again.\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto p-4 bg-white shadow-md rounded\">\r\n      <h1 className=\"text-2xl font-bold text-center mb-4\">AI Football Prediction</h1>\r\n\r\n      <input \r\n        type=\"email\" placeholder=\"Your Email\" className=\"w-full p-2 border mb-2\"\r\n        value={email} onChange={(e) => setEmail(e.target.value)} \r\n      />\r\n\r\n      <input \r\n        type=\"text\" placeholder=\"Home Team\" className=\"w-full p-2 border mb-2\"\r\n        value={homeTeam} onChange={(e) => setHomeTeam(e.target.value)} \r\n      />\r\n\r\n      <input \r\n        type=\"text\" placeholder=\"Away Team\" className=\"w-full p-2 border mb-2\"\r\n        value={awayTeam} onChange={(e) => setAwayTeam(e.target.value)} \r\n      />\r\n\r\n      <Elements stripe={stripePromise}>\r\n        <CardElement className=\"p-2 border mb-4\" />\r\n        <button \r\n          onClick={handlePayment} \r\n          className=\"w-full p-2 bg-blue-500 text-white rounded\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"Processing...\" : \"Pay $4 & Get Prediction\"}\r\n        </button>\r\n      </Elements>\r\n\r\n      {error && <p className=\"text-red-500 mt-2\">{error}</p>}\r\n\r\n      {prediction && (\r\n        <div className=\"mt-4 p-2 bg-gray-100 rounded\">\r\n          <h2 className=\"text-lg font-semibold\">Prediction Result:</h2>\r\n          <p><strong>{prediction.home_team}</strong> vs <strong>{prediction.away_team}</strong></p>\r\n          <p>Predicted Score: <strong>{prediction.predicted_score}</strong></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictionForm;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport PredictionForm from \"./components/App\";\r\nimport \"./index.css\";  // ✅ Ensure you have styles (optional)\r\n\r\n// ✅ Load Stripe with your public key\r\nconst stripePromise = loadStripe(\"pk_test_your_public_key\");\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Elements stripe={stripePromise}>\r\n      <PredictionForm />\r\n    </Elements>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}